# This is a machine-readable format for the ProPresenter Remote API
# it was inspired by the AsyncAPI spec, but this dialect keeps commands
# and responses together
#
# The advantage of asyncapi is that it is a standardized specification
# structure for APIs, but the disadvantage is that it has no real
# notion of the request-response message paradigm that ProPresenter uses.
# 
# As a result, I have written this document by hand, and have written
# my own translator to convert this document into asyncapi format
# to use its tools for documentation generation
#
#
# TODO:
#   - socialSendTweet
#   - telestratorSettings
#   - telestratorEndEditing
#   - telestratorSet
#   - telestratorUndo
#   - telestratorNew
#

# embedded asyncapi data
asyncapi:
  asyncapi: '2.1.0'
  info:
    title: ProPresenter API
    version: '7.6'
    description: |
      Documenting RenewedVision's undocumented network protocols with examples

      This document refers to **ProPresenter 7.6.**

      Warning: Be careful! It's easy to CRASH ProPresenter when sending invalid messages!

      Both the Remote Control and the Stage Display protocols are unencrypted text-based websocket connections from the client to the ProPresenter instance.

      NOTE: if both the Remote Control and the Stage Display interface are enabled in ProPresenter, they both operate over the Remote Control network port.

      "Channels" refers to the communication channels opened up by ProPresenter.
      Both versions 6 and 7 expose two channels. One is the "remote" channel, and the
      other is the "stagedisplay" channel. They have two separate websocket endpoints
      that take the following form:

      ```
      ws://[hostname]:[port]/[channel]
      ```

      ## IMPORTANT DIFFERENCE FROM PRO 6
      Pro 7 implements a slightly different WebSocket protocol that most
      websocket clients should handle transparently; however, in rare cases
      this implementation can cause problems for developers. Of note is
      that the protocol requires two HTTP request headers to be included
      in addition to the standard WebSocket upgrade headers.

      `Sec-WebSocket-Key` and `Sec-WebSocket-Version`

      The key must be a Base64 encoded key similar to this: `a8STpzZ6qXqaQvnHNehseA==`

      The Version must be at least 13.

      Note also that Pro7 incorrectly expects the HTTP header keys to appear
      in CamelCase which violates the HTTP spec, but nonetheless is what it is.

      Therefore, a correctly formed connection to the Pro7 server must have
      headers looking like this:

      ```
      GET /stagedisplay HTTP/1.1
      Upgrade: websocket
      Connection: Upgrade
      Sec-WebSocket-Key: /8STpzZ6qXqaQvnHNehseA==
      Sec-WebSocket-Version: 13
      ```

  defaultContentType: application/json
  servers:
    pro6:
      protocol: ws
      url: "ws://{host}:{port}/{channel_name}"
      description: |
        Connecting to ProPresenter involves making a Websocket connection using
        this address and then immediately following the connection with an
        authentication message (as described below) for the relevant "channel."
      variables:
        host:
          description: The hostname or ip address of the computer running ProPresenter 6
        port:
          description: The port specified in the ProPresenter Network settings
        channel_name:
          enum:
            - remote
            - stagedisplay
          description: |
            *remote* for the remote control channel,
            or *stagedisplay* for the stage display channel


# types will be converted into asyncapi schema objects
# base/built-in types: bool, int, float, string, object, list
# each base type will be converted to the proper type in the asyncapi spec
# bool → boolean, int → integer, list → array
#
# typed lists may be described here as list[typename]
#
# NOTE: any type may refer to any other type without regard to order in this document
#
# types follow this structure
#
# typename:
#   type: basetypename (if basetype is "object", define parameters below)
#   description: commonmark markdown string
#   example: full object example that properly matches the type
#   parameters: 
#     fieldname: 
#       type: fieldtype @required unless a constant value has been supplied
#       description: field description
#       example: field example
#       optional: boolean flag, defaults to false
#       options: list of valid options, creates enum fields if present
#     fieldnameWithConstantValue: value

types:

  # general types
  boolint:
    type: int
    description: 0 for false, 1 for true, (in Pro6, these sometimes show up as strings)

  colorRGB:
    type: string
    description: |
      four space-delimited numbers describing the r,g,b values of a color
      r,g,b values are 0-1
    example: "0.5 0.8 1"

  colorRGBA:
    type: string
    description: |
      four space-delimited doubles describing the r,g,b,a values of a color from 0-1
    example: "0.5 0.8 1 0.5"

  pro7Macro:
    type: object
    parameters:
      macroName:
        type: string
        description: Case-sensitive name of macro.
      macroID:
        type: string
        description: Internal ID of macro.
      macroColor:
        type: colorRGB
      macroIndex:
        type: int
        description: zero-based index of macro in system.

  pro7Look:
    type: object
    parameters:
      macroName:
        type: string
        description: Case-sensitive name of look.
      macroID:
        type: string
        description: Internal ID of look.
      macroIndex:
        type: int
        description: zero-based index of look in system.

  itemLocation:
    type: string
    description: |
      Unlike Pro6, Pro7 handles pathnames correctly without superfluous slashes.

      Also, unlike Pro6, Pro7 always sends and expects the full pathname. No basenames here.

      Playlist locations are specified by a zero-based index of the playlist
      and playlist group in which the item may be found.

      The first item in the first playlist would be `"0:0"`.

      If the first playlist item is a playlist group, then the first item
      in the first playlist in the first playlist group would be `"0.0:0"`.

      That is, the generalized location is this:

      `playlist_index[.child_playlist_index[.deeper_child_index[...]]]:item`

      NOTE:
      
      - On Mac, paths are delimited with a single forward slash `/`
      - On Windows, paths begin with the drive letter, but then also use the forward slash delimeter

    example: "C:/Path/To/ProPresenter/Library/Song 1 Title.pro6"

  # presentation types
  presentationSlide:
    type: object
    parameters:
      slideEnabled:
        type: bool
      slideNotes:
        type: string
      slideAttachmentMask:
        type: int
        description: unknown
      slideText:
        type: string
      slideImage:
        type: string
        description: |
          base64 encoded tiff image

          NOTE: Pro6 would send this image as a jpeg image, but Pro7 uses TIFF.
          However, as of 7.6, the content-type is misreported as image/jpeg, so browsers will
          attempt to read it as a jpeg file and fail.
      slideIndex:
        type: string
        description: |
          NOTE: The current version of Pro7 transmits a string value of `0`
          for every slide in every slideGroup.

          I think this is a bug.

          In Pro6, it would transmit the actual slideIndex of this slide in the presentation.
      slideTransitionType:
        type: int
        description: |
          `-1` for default transition or another number for a different transition
      slideLabel:
        type: string
      slideColor:
        type: colorRGBA
  presentationSlideGroup:
    type: object
    parameters:
      groupsummary:
        type: string
      groupColor:
        type: colorRGBA
      groupSlides:
        type: list[presentationSlide]
  presentation:
    type: object
    parameters:
      presentationSlideGroups:
        type: list[presentationSlideGroup]
      presentationsummary:
        type: string
      presentationHasTimeline:
        type: boolint
      presentationDestination:
        type: int
        description: The output this presentation is assigned to.
      presentationCurrentLocation:
        type: itemLocation
        description: |
          This field contains the location of the *currently active* presentation if there is one.
          
          It only refers to the location of *this* presentation if we asked for `presentationCurrent`

  presentationTriggerMessage:
    pushy: true
    type: object
    parameters:
      action: presentationTriggerIndex
      slideIndex:
        type: int
      presentationPath:
        type: itemLocation
        description: |
          If the current presentation was selected from a playlist, it will report the
          playlist location (i.e. `0:0`), but if it was selected from the Library directly,
          the path value will always be the *basename* only.
      presentationDestination:
        type: int
        description: refers to the destination screen of the current presentation.

  # playlist types for audio or presentation playlists
  playlistItemType:
    type: object
    parameters:
      playlistItemType:
        type: string
        options:
          - playlistItemTypeAudio
          - playlistItemTypePresentation
      playlistItemLocation:
        type: itemLocation
      playlistItemsummary:
        type: string
      playlistItemArtist:
        type: string
        description: only present for playlistItemTypeAudio
      playlistItemThumbnail:
        type: string
        description: base64 encoded jpeg image, not always included.
        optional: true

  playlistTypePlaylist:
    type: object
    parameters:
      playlistLocation:
        type: itemLocation
      playlistType: playlistTypePlaylist
      playlistsummary:
        type: string
      playlist:
        type: list[playlistItemType]
  playlistTypeGroup:
    type: object
    parameters:
      playlistType: playlistTypeGroup
      playlistsummary:
        type: string
      playlistLocation:
        type: itemLocation
      playlist:
        type: list[playlistUnionType]
  playlistUnionType:
    type:
      - playlistTypeGroup
      - playlistTypePlaylist


  # audio types  
  audioPlayPause:
    type: string
    options:
      - Play
      - Pause
    description: in ProPresenter 7, the "Play" option becomes "Playing"

  # clock types
  clockTimeString:
    type: string
    description: |
      NOTE: This is different from Pro6

      - real times are formatted as `"HH:MM:SS.mm"` with milliseconds
      - negative times are possible with a leading `-`.
      - empty times are `"00:00:00.00"`

  clockType:
    type: int
    options:
      - 0
      - 1
      - 2
    description: |
      `0` is Countdown, `1` is Countdown to Time, `2` is Elapsed Time

  # in the response from clockRequest
  clockFormat:
    type: object
    description: UNKNOWN / TODO
    parameters:
      clockMillisecondFormat:
        type: int
      clockWallTimeFormat:
        type: bool
      clockSecondFormat:
        type: int
      clockTimePeriodFormat:
        type: int
      clockMinuteFormat:
        type: int
      clockHourForma":
        type: int
    example:
      clockMillisecondFormat: 2
      clockWallTimeFormat: true
      clockSecondFormat: 2
      clockTimePeriodFormat: 0
      clockMinuteFormat: 2
      clockHourForma": 2


  clockDetail:
    type: object
    description: clockDetail is greatly expanded over Pro6
    parameters:
      clockType:
        type: clockType
      clockState:
        type: bool
        description: running is `true`, not running is `false`
      clockName:
        type: string
      clockIsPM:
        type: boolint
      clockTime:
        type: clockTimeString
      clockEndTime:
        type: clockTimeString
      clockDuration:
        type: clockTimeString
      clockOverrun:
        type: bool
        description: indicates if clock should keep running after it hits the endtime.
      clockTimePeriodFormat:
        type: int
        description: UNKNOWN / TODO
      clockFormat:
        type: clockFormat

  clockQuickInfo:
    type: list
    items:
      - 
        type: clockType
      - 
        type: int
        description: most recently changed value as indicated by the `action`
      -
        type: clockTimeString

  # in the response from clockStart or clockStop
  clockStartStopMessage:
    description: Pro7 no longer sends the `clockInfo` parameter.
    pushy: true
    type: object
    parameters:
      action: clockStartStop
      clockTime:
        type: clockTimeString
      clockState:
        type: boolint
        description: same as clockState in clockDetail, but given as a boolint
      clockIndex:
        type: int
        description: zero-based clock index, clock lists are in a stable order

  clockCurrentTimesMessage:
    pushy: true
    type: object
    parameters:
      action: clockCurrentTimes
      clockTimes:
        type: list[clockTimeString]
    example: {"action":"clockCurrentTimes","clockTimes":["0:10:00","--:--:--","13:52:23"]}
  
  # message types
  screenMessage:
    type: object
    parameters:
      messageComponents:
        type: list[string]
        description: |
          Each string is either a literal string or a variable expansion, which will be
          concatenated together to make the final on screen message.

          The content inside a `${}` is referred to as a `messageKey` in later commands
      messageTitle:
        type: string
    example: 
      {
        "messageComponents": [
          "Session will begin in: ",
          "${Countdown 1: H:MM:SS}",
          "."
        ],
        "messageTitle": "Countdown"
      }

  # stage display types
  stageScreenItem:
    type: object
    parameters:
      stageLayoutSelectedLayoutUUID:
        type: string
      stageScreenName:
        type: string
      stageScreenUUID:
        type: string
    example:
      {
        "stageLayoutSelectedLayoutUUID": "12CB7383-FA02-47BB-B501-747ADCA860D3",
        "stageScreenName": "Stage Screen 1",
        "stageScreenUUID": "22B3B653-97AB-4371-9958-E42915C8F24A"
      }

  stageLayoutInfo:
    type: object
    parameters:
      stageLayoutName:
        type: string
      stageLayoutUUID:
        type: string
    example:
      {
        "stageLayoutName": "Default",
        "stageLayoutUUID": "753B184F-CCCD-42F9-A883-D1DF86E1FFB8"
      }

  stageDisplayFrameGeometry:
    type: string
    description: |
      Frame Geometry is delivered in x,y coordinates based on screen percentages in the 
      following format:

      `{{upper_left_x_pct, upper_left_y_pct}, {lower_right_x_pct, lower_right_y_pct}}`

      NOTE: this is not valid JSON, so don't parse it that way!
    example: >
      {{0.025000000000000001, 0.37418655097613884}, {0.40000000000000002, 0.50108459869848154}}

  stageDisplayColor:
    type: string
    description: |
      Stage Display colors are strings of three or four space-delimited float values for RGB(A) from 0-1
    example: 1.000000 1.000000 1.000000 1.000000

  stageDisplayFrame:
    description:
      A Stage Display Frame is a box of stage display information.
    type: object
    parameters:
      ufr:
        type: stageDisplayFrameGeometry
      mde:
        type: int
        options: [0, 1, 2]
        description: |
          * frame mode is indicated by `mde`
            * mode 0: static image
            * mode 1: text
            * mode 2: live slide
      tAl:
        type: int
        description: Always seems to be `2`
      tCl:
        type: stageDisplayColor
        description: frame text color
      tSz:
        type: int
        description: Frame font size
      nme:
        type: string
        description: Name of this frame
      typ:
        type: int
        options: [1,2,3,4,5,6,7,8,9]
        description: |
          * frame type is indicated by `typ` and determines what content goes in this frame
            * type 1: current slide
            * type 2: next slide
            * type 3: current slide notes
            * type 4: next slide notes
            * type 5: Stage Message (uses message flash values)
            * type 6: Clock
            * type 7: Timer Display (uses `uid` to specify timer)
            * type 8: Video Countdown
            * type 9: Chord Chart
      fCl:
        type: stageDisplayColor
        description: (message frames only) frame message flash color
      fCh:
        type: bool
        description: (message frames only) frame use message flash
      uid:
        type: string
        description: (timer frames only) frame timer uid

  stageDisplayLayout:
    type: object
    description: |
      * `nme` indicates layout name
      * `ovr` indicates if overrun color should be used
      * `oCl` indicates color for timer overruns
      * `brd` indicates if borders and labels should be used
      * `uid` indicates layout uid
      * `zro` indicates if zeroes should be removed from times
      * `fme` indicates array of frame layout specifications
    parameters:
      nme:
        type: string
        description: indicates layout name
      brd:
        type: bool
        description: indicates if borders and labels should be used
      uid:
        type: string
        description: indicates layout uid
      zro:
        type: boolint
        description: indicates if leading zeroes should be removed from times
      ovr:
        type: bool
        description: indicates if overrun color should be used
      oCl:
        type: stageDisplayColor
        description: indicates color for timer overruns
      fme:
        type: list[stageDisplayFrame]
      acn: sl

  stageDisplayFrameValue:
    type: object
    parameters:
      uid:
        optional: true
        type: string
        description: (only for slides and timers) uid of the object in this frame
      txt:
        type: string
        description: the text content of this frame, if any
      acn:
        type: string
        options:
          - cs
          - csn
          - ns
          - nsn
          - msg
          - sys
          - vid
          - tmr
          - cc
        description: |
          * `cs` = current slide text
          * `csn` = current slide notes
          * `ns` = next slide text
          * `nsn` = next slide text
          * `msg` = stage display message text
          * `sys` = system clock time
          * `vid` = video countdown value
          * `tmr` = timer value
          * `cc` = chord chart
    example: 
      {
        "acn": "cs",
        "uid": "FAFCA1CB-8CB8-4E53-8B7C-8D61154516D0",
        "txt": ""
      }
      

  stageDisplayLiveSlideFrame:
    type: object
    parameters:
      RVLiveStream_action: RVLiveStream_frameData
      RVLiveStream_frameDataLength:
        type: int
        description: byte count of this frame data
      RVLiveStream_frameData: 
        type: string
        description: base64 encoded jpeg image
    example: 
      {
        "RVLiveStream_action": "RVLiveStream_frameData",
        "RVLiveStream_frameDataLength": 14625,
        "RVLiveStream_frameData": "..."
      }

  stageDisplaySetsMessage:
    type: object
    parameters:
      action: stageDisplaySets
      stageScreens:
        type: list[stageScreenItem]
      stageDisplayIndex:
        type: int
        example: 4
      stageLayouts:
        type: list[stageLayoutInfo]
    example: 
      {
        "action": "stageDisplaySets",
        "stageScreens": [
          {
            "stageLayoutSelectedLayoutUUID": "12CB7383-FA02-47BB-B501-747ADCA860D3",
            "stageScreenName": "Stage Screen 1",
            "stageScreenUUID": "22B3B653-97AB-4371-9958-E42915C8F24A"
          }
        ],
        "stageLayouts": [
          {
            "stageLayoutName": "Default",
            "stageLayoutUUID": "753B184F-CCCD-42F9-A883-D1DF86E1FFB8"
          },
          {
            "stageLayoutName": "Slides",
            "stageLayoutUUID": "89A2AC43-B47F-44C5-8E21-CE0E424A70C1"
          }
        ]
      }

channels:
  remote:
    summary: Remote Control
    description: |
      The `remote` channel carries all the
      information from the "ProPresenter Remote" app

      CONNECT WITH:
      
      ```
      ws://[hostname]:[port]/remote
      ```

      -   The value of the protocol parameter is used to perform a version check on the remote client.
      -   ProPresenter 7.0 - 7.4.1 checks for a value here of at least 700 - otherwise it denies authentication and returns "Protocol out of date. Update application"
      -   ProPresenter 7.4.2 and later checks for a value here of at least 701 - otherwise it denies authentication and returns "Protocol out of date. Update application"

    # "pushy" message types
    messages:
      - presentationTriggerMessage
      - clockCurrentTimesMessage
      - clockStartStopMessage

    # actions refer to commands that can be sent to ProPresenter
    actions:
      authenticate:
        summary: RemoteAuthentication
        description: |
          This is the first command ProPresenter expects to receive over the websocket.
          This command requests authentication.

          For ProPresenter 7.4.2 and later, the protocol must be `701`
        message:
          payload:
            action: authenticate
            protocol: 701
            password:
              type: string
              description: as defined in the ProPresenter network settings
          example:
            action: authenticate
            protocol: 701
            password: myGreatPassword

        response:
          payload:
            action: authenticate
            error:
              type: string
              description: empty if there is no error, otherwise error message
            authenticated:
              type: boolint
              description: 1 for true, 0 for false
            controller:
              type: boolint
              description: Does user have permission to send control messages? 1 for true, 0 for false
            majorVersion:
              type: int
              description: For ProPresenter 7.6, this would be `7`
            minorVersion:
              type: int
              description: For ProPresenter 7.6, this is `6`
          example: 
            {
              "controller": 1,
              "authenticated": 1,
              "error": "",
              "majorVersion": 7,
              "minorVersion": 6,
              "action": "authenticate"
            }
      
      libraryRequest:
        summary: Get Library (all presentations)
        description: |
          Will return all items in the ProPresenter library.

          - unlike Pro6, Pro7 sends the pathnames with slashes correctly encoded.
        message:
          payload:
            action: libraryRequest
        response:
          payload:
            action: libraryRequest
            library:
              type: list[itemLocation]
              description: |
                This will be a list of full pathnames for all items in the Presentation library.
          example: 
            {
              "library": [
                "/Path/To/ProPresenter/Library/Come Alive (Dry Bones).pro6",
                "/Path/To/ProPresenter/Library/Pour Out My Heart.pro6",
                "/Path/To/ProPresenter/Library/Away in a manger.pro6",
                "... ALL PRESENTATIONS IN THE LIBRARY ..."
              ],
              "action": "libraryRequest"
            }
            
        
      playlistRequestAll:
        summary: Get Playlists
        description: |
          Will return all presentation playlists.

          - Presentation playlists and Audio playlists have a similar format
          - A playlist may be a `playlistTypePlaylist` or a `playlistTypeGroup`
          - `playlistTypePlaylist` will contain a list of `playlistItemTypePresentation` (or `playlistItemTypeAudio` for audio playlists)
          - `playlistTypeGroup` may contain both `playlistTypePlaylist` and `playlistTypeGroup`
        message:
          payload:
            action: playlistRequestAll
        response:
          payload:
            action: playlistRequestAll
            playlistAll:
              type: list[playlistUnionType]
          example: 
            {
              "playlistAll": [
                {
                  "playlistLocation": "0",
                  "playlistType": "playlistTypePlaylist",
                  "playlistName": "Default",
                  "playlist": [
                    {
                      "playlistItemName": "!~ PRE-SERVICE",
                      "playlistItemLocation": "0:0",
                      "playlistItemType": "playlistItemTypePresentation"
                    }
                  ]
                },
                {
                  "playlistLocation": "1",
                  "playlistType": "playlistTypeGroup",
                  "playlistName": "2017",
                  "playlist": [
                    {
                      "playlistLocation": "1.0",
                      "playlistType": "playlistTypePlaylist",
                      "playlistName": "2017-01-28-Vision Dinner",
                      "playlist": [
                        {
                          "playlistItemName": "!MISC2",
                          "playlistItemLocation": "1.0:0",
                          "playlistItemType": "playlistItemTypePresentation"
                        },
                        {
                          "playlistItemName": "!MISC1",
                          "playlistItemLocation": "1.0:1",
                          "playlistItemType": "playlistItemTypePresentation"
                        }
                      ]
                    }
                  ]
                }
              ],
              "action": "playlistRequestAll"
            }
            
      presentationRequest:
        summary: Request a Playlist by Location
        description: |
          NOTE: even though the requested action is `presentationRequest` ProPresenter responds with
          an action value of `presentationCurrent` but it will be slightly different from the response to
          an actual `presentationCurrent` request. See below.
        message:
          description: |
            `presentationSlideQuality` is optional. It refers to the pixel width of the
            slide previews sent from ProPresenter. If left blank, 100 pixel wide
            previews will be sent. If set to 0 previews will not be generated at all.
            The remote app asks for quality 25 first and then follows it up with a second
            request for quality 100.
          payload:
            action: presentationRequest
            presentationPath:
              type: itemLocation
            presentationSlideQuality:
              type: int
              optional: true
          example: 
            {
              "action": "presentationRequest",
              "presentationPath": "/Path/To/ProPresenter/Library/Song 1 Title.pro6",
              "presentationSlideQuality": 25
            }
        response:
          description: |
            Remember that the `presentationCurrentLocation` is not the location of the presentation you requested. It is the path of the presentation whose slide is currently active.
          payload:
            action: presentationCurrent
            presentationPath:
              type: itemLocation
            presentation:
              type: presentation
          example: 
            {
              "presentationPath": "/Volumes/Jeff/Documents/ProPresenter/Libraries/Default 1/2020-08-16 We Are Chosen-Chosen for This.pro",
              "action": "presentationCurrent",
              "presentation": {
                "presentationSlideGroups": [
                  {
                    "groupName": "Group",
                    "groupColor": "",
                    "groupSlides": [
                      {
                        "slideEnabled": true,
                        "slideNotes": "",
                        "slideText": "",
                        "slideImage": "",
                        "slideIndex": "0",
                        "slideLabel": "162. Chosen Bumper",
                        "slideColor": "0 0 0 0"
                      },
                      {
                        "slideEnabled": true,
                        "slideNotes": "[sermon_end]\nvmixoverlay[2,Out]\nvmixoverlay[1,In,10]\nlive[999]",
                        "slideText": "",
                        "slideImage": "",
                        "slideIndex": "0",
                        "slideLabel": "",
                        "slideColor": "0 0 0 0"
                      }
                    ]
                  }
                ],
                "presentationName": "2020-08-16 We Are Chosen-Chosen for This",
                "presentationHasTimeline": 0,
                "presentationCurrentLocation": "/Volumes/Jeff/Documents/ProPresenter/Libraries/Default 1/2020-08-16 We Are Chosen-Chosen for This.pro",
                "presentationDestination": 0
              }
            }
            

      presentationCurrent:
        summary: Request Current Presentation
        description: |
          Requests the currently active presentation if there is one. If no presentation has a slide
          active, then nothing will be returned.

          NOTE: You can distinguish this response from a `presentationRequest` request
          because this response will include `presentationDestination` as a field at the root level
          of the response.

          NOTE: In Pro6, the extra field was `presentationPath` at the root level. Now, both
          requests return a `presentationPath`. I still consider this a bug.

          NOTE: Pro7 ignores the `presentationSlideQuality` field unless it is a `string`. This is a bug.
        message:
          payload:
            action: presentationCurrent
            presentationSlideQuality:
              type: string
              optional: true
        response:
          payload:
            action: presentationCurrent
            presentationPath:
              type: itemLocation
            presentation:
              type: presentation
            presentationDestination:
              type: int
              description: Which output is this presentation assigned to?

      presentationSlideIndex:
        summary: Get the Index of the Current Slide
        description: |
          - Slides are indexed from 0
          - This response always sends the slideIndex as a `string` value
          - The ProPresenter remote issues this action every time it does a `presentationRequest`

          NOTE: The ProPresenter remote issues this action every time it issues a `presentationRequest` action.
          
          NOTE; In Pro7, when a presentation is automatically advancing on the announcements layer
          while a user is triggering slides in another presentation on the normal output layer, the
          index returns can sometimes vary between the two different presentations!

        message:
          payload:
            action: presentationSlideIndex
        response:
          payload:
            action: presentationSlideIndex
            slideIndex:
              type: string
              example: "0"

      presentationTriggerIndex:
        summary: Activate a Slide
        description: |
          Works just like clicking on a slide.

          NOTE: This is different from Pro6. Only string numerics are accepted for slideIndex
          even though the `presentationTriggerMessage` responds with an integer. This is a bug.
        message:
          payload:
            action: presentationTriggerIndex
            slideIndex:
              type: string
            presentationPath:
              type: itemLocation
              example: "0:0"
        response:
          pushy: true
          type: presentationTriggerMessage

      presentationTriggerNext:
        summary: Activate the Next Slide
        description: Works just like hitting the right arrow or spacebar.
        message:
          payload:
            action: presentationTriggerNext
        response:
          type: presentationTriggerMessage

      presentationTriggerPrevious:
        summary: Activate the Previous Slide
        description: Works just like hitting the left arrow.
        message:
          payload:
            action: presentationTriggerPrevious
        response:
          type: presentationTriggerMessage

      # audio commands
      audioRequest:
        summary: Get Audio Library
        description: Will return all the items in the audio library
        message:
          payload:
            action: audioRequest
        response:
          payload:
            action: audioRequest
            audioPlaylist:
              type: list[playlistUnionType]

      audioCurrentSong:
        summary: Get the Current Song
        description: Will return the data for the currently playing song, if there is one.
        message:
          payload:
            action: audioCurrentSong
        response:
          payload:
            action: audioCurrentSong
            audioArtist:
              type: string
            audiosummary:
              type: string
          example: 
            {
              "audioArtist": "",
              "action": "audioCurrentSong",
              "audioName": "Peaceful Instrumental - C"
            }
            

      audioIsPlaying:
        summary: Is Audio Playing (BROKEN)
        description: This api request exists, but in Pro7 always reports `true`
        message:
          payload:
            action: audioIsPlaying
        response:
          payload:
            action: audioIsPlaying
            audioIsPlaying: true

      audioStartCue:
        summary: Start Audio Cue
        description: |
          This command will result in an `audioTriggered` message, but since the
          play/pause status has changed, ProPresenter will also send an `audioPlayPause` message.
        message:
          payload:
            action: audioStartCue
            audioChildPath:
              type: itemLocation
            audioPath:
              type: string
              description: UNKNOWN / TODO
        response:
          pushy: true
          payload:
            action: audioTriggered
            audioArtist:
              type: string
            audiosummary: 
              type: string
          example: 
            {
              "audioArtist": "",
              "action": "audioTriggered",
              "audioName": "Peaceful Instrumental - C"
            }
            

      audioPlayPause:
        summary: Toggle the Audio Play State
        description: |
          NOTE: this is different from Pro6. Pro6 used `Play` but Pro7 uses `Playing`
        message:
          payload:
            action: audioPlayPause
        response:
          pushy: true
          payload:
            action: audioPlayPause
            audioPlayPause:
              type: string
              options:
                - Playing
                - Pause

      # timeline commands
      timelinePlayPause:
        summary: Toggle the Timeline Play State
        description: If `presentationPath` is missing, Pro6 would crash, but Pro7 doesn't.
        message:
          payload:
            action: timelinePlayPause
            presentationPath:
              type: itemLocation

      timelineRewind:
        summary: Reset the Timeline for a Presentation
        description: If `presentationPath` is missing, Pro6 will crash.
        message:
          payload:
            action: timelineRewind
            presentationPath:
              type: itemLocation

      # clock / timer commands
      clockRequest:
        summary: Request all Clock data
        description:
        message:
          payload:
            action: clockRequest
        response:
          payload:
            action: clockRequest
            clockInfo:
              type: list[clockDetail]

      clockCurrentTimes:
        summary: Get Current Times for All Clocks
        description: REMOVED FROM PRO7 !!
        message:
          payload:
            action: clockCurrentTimes
        response:
          type: clockCurrentTimesMessage

      clockStartSendingCurrentTime:
        summary: Subscribe to Clock Updates
        description: |
          ProPresenter will send one clock update every second even if no clock values have changed.

          The response payload is exactly the same as `clockCurrentTimes`
        message:
          payload:
            action: clockStartSendingCurrentTime
        response:
          type: clockCurrentTimesMessage

      clockStopSendingCurrentTime:
        summary: Unsubscribe from Clock Updates
        description:
        message:
          payload:
            action: clockStopSendingCurrentTime

      clockStart:
        summary: Start a Specific Clock
        description:
        message:
          payload:
            action: clockStart
            clockIndex:
              type: int
        response:
          type: clockStartStopMessage

      clockStop:
        summary: Stop a Specific Clock
        description:
        message:
          payload:
            action: clockStop
            clockIndex:
              type: int
        response:
          type: clockStartStopMessage

      clockReset:
        summary: Reset a clock back to initial settings
        description:
        message:
          payload:
            action: clockReset
            clockIndex:
              type: int
        response:
          payload:
            action: clockResetIndex

      clockUpdate:
        summary: Update a Clock (Timer) (eg edit time)
        description: |-
          * Clocks are referenced by index. See reply from "clockRequest" action above to learn indexes.
          * Not all parameters are required for each clock type.
            * Countdown clocks only need "clockTime".
            * Elapsed Time Clocks need "clockTime" and optionally will use "clockElapsedTime" if you send it (to set the End Time).
            * You can rename a clock by optionally including the clockName.
            * Type 0 is Countdown
            * Type 1 is CountDown to Time
            * Type 2 is Elapsed Time.
            * Overrun can be modified if you choose to include that as well.
        message:
          payload:
            action: clockUpdate
            clockIndex:
              type: int
              example: 1
            clockType:
              type: int
              example: 0
            clockTime:
              type: string
              example: 09:04:00
            clockOverrun:
              type: int
              example: 0
            clockIsPM:
              type: int
              example: 1
            clockName:
              type: string
              example: Countdown 2
            clockElapsedTime:
              type: string
              example: 0:02:00
          example: 
            {
              "action":"clockUpdate",
              "clockIndex":1,
              "clockType":0,
              "clockTime":"09:04:00",
              "clockOverrun":false,
              "clockIsPM":1,
              "clockName":"Countdown 2",
              "clockElapsedTime":"0:02:00"
            }
            

      clockResetAll:
        message:
          payload:
            action: clockResetAll
          example: 
            {"action":"clockResetAll"}

      clockStopAll:
        message:
          payload:
            action: clockStopAll
          example: 
            {"action":"clockStopAll"}

      clockStartAll:
        message:
          payload:
            action: clockStartAll
          example: 
            {"action":"clockStartAll"}


      messageRequest:
        summary: Get all Messages
        description: |-
          * The key is everything inside the curly braces `${}` so that the key for a countdown looks like this `Countdown 1: H:MM:SS`.
          * If the key refers to a countdown, the value is used to update the `duration` field of the countdown timer, but will not perform a "reset".
          * If the key refers to a countdown and the countdown is not running, this will resume it from its current value.
        message:
          payload:
            action: messageRequest
          example: 
            {"action":"messageRequest"}
            
        response:
          payload:
            action: messageRequest
            messages:
              type: list[screenMessage]
          example: 
            {
              "action": "messageRequest",
              "messages": [
                {
                  "messageComponents": [
                    "message:",
                    "${Message}"
                  ],
                  "messageTitle": "Message"
                },
                {
                  "messageComponents": [
                    "Session will begin in: ",
                    "${Countdown 1: H:MM:SS}"
                  ],
                  "messageTitle": "Countdown"
                },
                {
                  "messageComponents": [
                    "${Message}"
                  ],
                  "messageTitle": "Message"
                },
                {
                  "messageComponents": [
                    "Service starts in ",
                    "${countDownTimerName_1: H:MM:SS}"
                  ],
                  "messageTitle": "Countdown"
                }
              ]
            }
            

      messageSend:
        summary: Display a Message
        description: |
          Display a message identified by its index. Add as many key, value
          pairs as you like.

          See `messageRequest` for more information about keys.
        message:
          payload:
            action: messageSend
            messageIndex:
              type: int
            messageKeys:
              type: list[string]
            messageValues:
              type: list[string]
        example: 
          {
            "action":"messageSend",
            "messageIndex":0,
            "messageKeys": [
              "key1",
              "key2",
              "..."
            ],
            "messageValues": [
              "Value1",
              "Value2",
              "..."
            ]
          }
          

      messageHide:
        summary: Hide a Message
        description: Hide a message identified by its index
        message:
          payload:
            action: messageHide
            messageIndex:
              type: int
              description: accepts string values too.

      # stage display control messages
      stageDisplaySendMessage:
        summary: Show Stage Display Message
        description: 
        message:
          payload:
            action: stageDisplaySendMessage
            stageDisplayMessage:
              type: string
              example: Type a Message Here
          example: 
            {
              "action":"stageDisplaySendMessage",
              "stageDisplayMessage":"Type a Message Here"
            }

      stageDisplayHideMessage:
        summary: Hide Stage Display Message
        description: 
        message:
          payload:
            action: stageDisplayHideMessage
          example: 
            {"action":"stageDisplayHideMessage"}

      stageDisplaySetIndex:
        summary: Select Stage Display Layout
        description: |
          EXPECTED RESPONSE IS THE SAME AS THE SENT COMMAND
        message:
          payload:
            action: stageDisplaySetIndex
            stageDisplayIndex:
              type: int
              example: 0
          example: 
            {"action":"stageDisplaySetIndex","stageDisplayIndex":0}
            
        response:
          payload:
            action: stageDisplaySetIndex
            stageDisplayIndex:
              type: int
              example: 0
          example: 
            {"action":"stageDisplaySetIndex","stageDisplayIndex":0}
            

      stageDisplaySets:
        summary: Get Stage Display Layouts
        description: |
          NOTE: this is much different from Pro6 also.
        message:
          payload:
            action: stageDisplaySets
          example: 
            { "action": "stageDisplaySets" }
        response:
          type: stageDisplaySetsMessage

      stageDisplayChangeLayout:
        summary: Select Stage Display Layout
        message:
          payload:
            action: stageDisplayChangeLayout
            stageLayoutUUID:
              type: string
            stageScreenUUID:
              type: string 
          example:
            {
              "action":"stageDisplayChangeLayout",
              "stageLayoutUUID":"687e061b-c3fc-48a7-be8c-40837b622fed",
              "stageScreenUUID":"8e383232-2a89-4802-a507-93c09642fa68"
            }

        response:
          type: stageDisplaySetsMessage

      # macros and looks
      # new items for 7.6
      macrosTrigger:
        summary: Trigger a Macro
        description: |
          Trigger a macro using `macroName`, `macroID`, or `macroIndex`, must have at least one.

          If you send multiple identifier parameters, they are handled in the following order of precedence:
          
          1. macroID
          2. macroName
          3. macroIndex

        message:
          payload:
            action: macrosTrigger
            macroName:
              type: string
              optional: true
              description: case-sensitive name of macro to trigger
            macroID:
              type: string
              optional: true
              description: internal ID of macro to trigger
            macroIndex:
              type: int
              optional: true
              description: zero-based index of macro to trigger

      macrosRequest:
        summary: Request a list of Pro7 Macros
        message:
          payload:
            action: macrosRequest
        response:
          payload:
            action: macrosRequest
            macros:
              type: list[pro7Macro]
          example:
            {
              "action": "macrosRequest",
              "macros": [
                {
                  "macroName": "<Case-sensitive name of Macro>",
                  "macroID": "<Internal ID of Macro>",
                  "macroColor": "<red> <green> <blue>",
                  "macroIndex": <Zero-based index of Macro>
                }
              ]
            }

      looksTrigger:
        summary: Trigger a Look
        description: |
          Trigger a look. Similar to triggering a Macro.

          If you send multiple identifier parameters, they are handled in the following order of precedence:
          
          1. lookID
          2. lookName
          3. lookIndex

        message:
          payload:
            action: looksTrigger
            macroName:
              type: string
              optional: true
              description: case-sensitive name of look to trigger
            macroID:
              type: string
              optional: true
              description: internal ID of look to trigger
            macroIndex:
              type: int
              optional: true
              description: zero-based index of look to trigger

      looksRequest:
        summary: Request a list of Pro7 Looks
        description: Includes the currently active Look (activeLook)
        message:
          payload:
            action: looksRequest
        response:
          payload:
            action: looksRequest
            looks:
              type: list[pro7Look]
            activeLook:
              type: object
              parameters:
                lookName:
                  type: string
                lookID:
                  type: string
          example:
            {
              "action": "looksRequest",
              "looks": [
                {
                  "lookName": "<Case-sensitive name of Look>",
                  "lookID": "<Internal ID of Look>",
                  "lookIndex": <Zero-based index of Look>
                }
              ],
              "activeLook": {
                "lookName": "<name>",
                "lookID": "<identifier>"
              }
            }

      # general control messages
      clearAll:
        summary: Clear All
        description: ''
        message:
          payload:
            action: clearAll
          example: 
            {"action":"clearAll"}
            

      clearText:
        summary: Clear Slide
        description: ''
        message:
          payload:
            action: clearText
          example: 
            {"action":"clearText"}
            

      clearProps:
        summary: Clear Props
        description: ''
        message:
          payload:
            action: clearProps
          example: 
            {"action":"clearProps"}
            

      clearAudio:
        summary: Clear Audio
        description: ''
        message:
          payload:
            action: clearAudio
          example: 
            {"action":"clearAudio"}
            

      clearVideo:
        summary: Clear Video
        description: ''
        message:
          payload:
            action: clearVideo
          example: 
            {"action":"clearVideo"}
            

      clearTelestrator:
        summary: Clear Telestrator
        description: ''
        message:
          payload:
            action: clearTelestrator
          example: 
            {"action":"clearTelestrator"}
            

      clearToLogo:
        summary: Clear To Logo
        description: ''
        message:
          payload:
            action: clearToLogo
          example: 
            {"action":"clearToLogo"}
            


  stagedisplay:
    summary: Stage Display API
    protocol: 610
    description: |
      NOTE; Pro7 maintains the same protocol number as Pro6: `610`

      The `stagedisplay` channel carries all the
      information from the "ProPresenter Stage" app

      CONNECT WITH:
      
      ```
      ws://[hostname]:[port]/stagedisplay
      ```

      ProPresenter also provides a mechanism for getting a high quality thumbnail image
      for any slide or chord chart in the current presentation:
      
      ```
      http://PROPRESENTER_IP:PROPRESENTER_PORT/stage/image/SLIDE_UID
      ```

      In ProPresenter 6, the response will be the raw bytes of a jpeg image but the 
      response will *NOT* contain the proper Content-Type of `image/jpeg`.

      In ProPresenter 7, the response will be the raw bytes of a TIFF image, but the
      response will INCORRECTLY claim it is a Content-Type of `image/jpeg`.


    # any one of the stagedisplay frame values can be sent independently
    # however, cs, csn, ns, nsn are always sent together with an fv message
    messages:
      - fv
      - sl
      - msg
      - sys
      - tmr
      - cc
      - vid


    # commands to send
    actions:
      ath:
        summary: StageDisplayAuthentication
        description: ''
        message:
          payload:
            acn: ath
            ptl: 610
            pwd:
              type: string
          example: 
            {"pwd":"PASSWORD","ptl":610,"acn":"ath"}
            
        response:
          payload:
            acn: ath
            ath:
              type: bool
            err:
              type: string
          example: 
            {"acn":"ath","ath":true,"err":""}
            
        
      asl:
        summary: Get All Stage Display Layouts
        description: |-
          * `acn` of `asl` means "all stage layouts"
          * `ary` indicates array of stage layouts
        message:
          payload:
            acn: asl
          example:
            {"acn":"asl"}
            
        response:
          payload:
            acn: asl
            ary:
              type: list[stageDisplayLayout]
          example:
            {
              "acn": "asl",
              "ary": [
                {
                  "brd": true,
                  "uid": "753B184F-CCCD-42F9-A883-D1DF86E1FFB8",
                  "zro": 0,
                  "oCl": "1.000000 0.000000 0.000000",
                  "fme": [
                    {
                      "ufr": "{{0.025000000000000001, 0.37418655097613884}, {0.40000000000000002, 0.50108459869848154}}",
                      "mde": 1,
                      "tCl": "1.000000 1.000000 1.000000",
                      "tAl": 2,
                      "tSz": 60,
                      "nme": "Current Slide",
                      "typ": 1
                    }
                  ],
                  "ovr": true,
                  "acn": "sl",
                  "nme": "Default"
                }
              ]
            }
            

      psl:
        summary: Request Current Stage Display Layout
        description: ''
        message:
          payload:
            acn: psl
          example:
            {"acn":"psl"}
            
        response:
          payload:
            acn: psl
            uid:
              type: string
          example:
            {"acn":"psl","uid":"F8260B13-9C5B-4D2C-80F1-C72346759F11"}
            

      fv:
        summary: Request Frame Values for Stage Display
        description: |
          When the frame value is pushed as a result of a slide trigger event,
          only `cs`, `ns`, `csn`, `nsn` will be sent.

          Applications should listen for all the other `acn` values separately.
        message:
          payload:
            acn: fv
            uid:
              type: string
          example:
            {"acn":"fv","uid":"F8260B13-9C5B-4D2C-80F1-C72346759F11"}
            
        response:
          pushy: true
          payload:
            acn: fv
            ary:
              type: list[stageDisplayFrameValue]
          example: 
            {
              "acn": "fv",
              "ary": [
                {
                  "acn": "cs",
                  "uid": "FAFCA1CB-8CB8-4E53-8B7C-8D61154516D0",
                  "txt": ""
                },
                {
                  "acn": "ns",
                  "uid": "95D16968-589A-11EB-8D62-FCAA147AEF2F",
                  "txt": ""
                },
                {
                  "acn": "csn",
                  "txt": "[sermon_start]\nevent[2888]\nvmixoverlay[1,Out]\nlive[1]"
                },
                {
                  "acn": "nsn",
                  "txt": "vmixoverlay[2,Out]"
                },
                {
                  "acn": "msg",
                  "txt": ""
                },
                {
                  "acn": "sys",
                  "txt": " 9:57 AM"
                },
                {
                  "acn": "tmr",
                  "uid": "47E8B48C-0D61-4EFC-9517-BF9FB894C8E2",
                  "txt": "0:09:59"
                },
                {
                  "acn": "vid",
                  "txt": ""
                },
                {
                  "acn": "cc",
                  "uid": ""
                }
              ]
            }

      # push only messages
      sl:
        summary: On New Stage Display Selected
        description: |-
          * `acn` of `sl` indicates this is a single stage layout
        response:
          type: stageDisplayLayout

      sys:
        summary: On New System Time
        description: ''
        response:
          pushy: true
          payload:
            acn: sys
            txt:
              type: string
              example: ' 11:17 AM'
          example: 
            {"acn":"sys","txt":" 11:17 AM"}
            

      vid:
        summary: On New Video Countdown Time
        description: Time follows the same H:MM:SS format as the remote protocol.
        response:
          pushy: true
          payload:
            acn: vid
            txt:
              type: string
              example: '--:--:--'
          example:
            {"acn":"vid","txt":"0:00:18"}
            
      cc:
        summary: On New Chord Chart
        description: |
          Chord chart images can be downloaded in the same way as slide preview images

          http://PROPRESENTER_IP:PROPRESENTER_PORT/stage/image/UID
        response:
          pushy: true
          payload:
            acn: cc
            uid:
              type: string
              example: E65DF4DF-960D-4CF5-ADF5-60F200F6AFF7
          example:
            {"acn":"cc","uid":"E65DF4DF-960D-4CF5-ADF5-60F200F6AFF7"}

      tmr:
        summary: On Timer Update
        description: ''
        response:
          pushy: true
          payload:
            acn: tmr
            uid: 
              type: string
              description: timer uid
            txt:
              type: string
              description: timer text
          example:
            {
              "acn": "tmr",
              "uid": "[TIMER UID]",
              "txt": "--:--:--"
            }
